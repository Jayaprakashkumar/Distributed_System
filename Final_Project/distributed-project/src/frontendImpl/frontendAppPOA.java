package frontendImpl;


/**
* frontendImpl/frontendAppPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from frontendImpl.idl
* Sunday, August 4, 2019 12:43:04 PM EDT
*/

public abstract class frontendAppPOA extends org.omg.PortableServer.Servant
 implements frontendImpl.frontendAppOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("addEvent", new java.lang.Integer (0));
    _methods.put ("removeEvent", new java.lang.Integer (1));
    _methods.put ("listEventAvailability", new java.lang.Integer (2));
    _methods.put ("bookEvent", new java.lang.Integer (3));
    _methods.put ("getBookingSchedule", new java.lang.Integer (4));
    _methods.put ("cancelEvent", new java.lang.Integer (5));
    _methods.put ("swapEvent", new java.lang.Integer (6));
    _methods.put ("shutdown", new java.lang.Integer (7));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  // Manager methods
       case 0:  // frontendImpl/frontendApp/addEvent
       {
         String eventID = in.read_string ();
         String eventType = in.read_string ();
         int bookingCapacity = in.read_long ();
         String managerID = in.read_string ();
         boolean bugValue = in.read_boolean ();
         boolean $result = false;
         $result = this.addEvent (eventID, eventType, bookingCapacity, managerID, bugValue);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 1:  // frontendImpl/frontendApp/removeEvent
       {
         String eventID = in.read_string ();
         String eventType = in.read_string ();
         String managerID = in.read_string ();
         boolean $result = false;
         $result = this.removeEvent (eventID, eventType, managerID);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 2:  // frontendImpl/frontendApp/listEventAvailability
       {
         String eventType = in.read_string ();
         String managerID = in.read_string ();
         String $result = null;
         $result = this.listEventAvailability (eventType, managerID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  // Customer methods
       case 3:  // frontendImpl/frontendApp/bookEvent
       {
         String customerID = in.read_string ();
         String eventID = in.read_string ();
         String eventType = in.read_string ();
         boolean crashValue = in.read_boolean ();
         boolean $result = false;
         $result = this.bookEvent (customerID, eventID, eventType, crashValue);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 4:  // frontendImpl/frontendApp/getBookingSchedule
       {
         String customerID = in.read_string ();
         String $result = null;
         $result = this.getBookingSchedule (customerID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 5:  // frontendImpl/frontendApp/cancelEvent
       {
         String customerID = in.read_string ();
         String eventID = in.read_string ();
         String eventType = in.read_string ();
         boolean $result = false;
         $result = this.cancelEvent (customerID, eventID, eventType);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 6:  // frontendImpl/frontendApp/swapEvent
       {
         String customerID = in.read_string ();
         String newEventID = in.read_string ();
         String newEventType = in.read_string ();
         String oldEventID = in.read_string ();
         String oldEventType = in.read_string ();
         boolean $result = false;
         $result = this.swapEvent (customerID, newEventID, newEventType, oldEventID, oldEventType);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 7:  // frontendImpl/frontendApp/shutdown
       {
         this.shutdown ();
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:frontendImpl/frontendApp:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public frontendApp _this() 
  {
    return frontendAppHelper.narrow(
    super._this_object());
  }

  public frontendApp _this(org.omg.CORBA.ORB orb) 
  {
    return frontendAppHelper.narrow(
    super._this_object(orb));
  }


} // class frontendAppPOA
